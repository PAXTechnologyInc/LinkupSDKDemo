import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

def static buildDate() {
    def df = new SimpleDateFormat("yyyyMMdd")
    df.setTimeZone(TimeZone.getDefault())
    return df.format(new Date())
}

android {
    compileSdkVersion 30
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.pax.linkupsdk.demo"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 6
        versionName "V1.00.05" + "_" + buildDate()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    signingConfigs {
        paxConfig {
            if (isInJenkins()) {
                def appStoreFile = System.getenv("KEY_STORE")
                def appStorePassword = System.getenv("KEY_PASSWORD")
                def appKeyAlias = System.getenv("KEY_ALIAS")
                def appKeyPassword = System.getenv("KEY_PASSWORD")
                storeFile file(appStoreFile)
                storePassword appStorePassword
                keyAlias appKeyAlias
                keyPassword appKeyPassword
            } else {
                storeFile file("${project.rootDir}/paxapp.keystore")
                storePassword "pax123"
                keyAlias "androiddebugkey"
                keyPassword "pax123"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.paxConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.paxConfig
        }
    }
    
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildType = variant.buildType.name
            def newfilename = "LinkUpSDKDemo_" + defaultConfig.versionName /*+ "_" + buildTime1() + "-"  + buildTime()*/
            if (buildType == "debug") {
                newfilename += "_debug"
            }
//            if (buildType == "release") {
//                newfilename += "_release"
//            }
            output.outputFileName = new File(newfilename + ".apk")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.alibaba:fastjson:1.2.83'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
}

boolean isInJenkins() {
    Map<String, String> map = System.getenv()
    if (map == null) {
        return false
    }
    String str = map.get("Path")
    if (str != null) {
        // it's windows
        return false
    } else {
        str = ""
        Iterator it = map.iterator()
        while (it.hasNext()) {
            str += it.next()
        }
        if ((str.contains("jenkins"))) {
            return true
        } else {
            return false
        }
    }
    return false
}
